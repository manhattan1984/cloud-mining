// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDDRj6bhA72rUU2Wgcq2eA
// Component: IUcshbqPHx

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_wealth_aid.module.css"; // plasmic-import: tDDRj6bhA72rUU2Wgcq2eA/projectcss
import sty from "./PlasmicGuidelineItem.module.css"; // plasmic-import: IUcshbqPHx/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: qaIMd65Es9/icon

export type PlasmicGuidelineItem__VariantMembers = {
  reverse: "reverse";
};
export type PlasmicGuidelineItem__VariantsArgs = {
  reverse?: SingleBooleanChoiceArg<"reverse">;
};
type VariantPropType = keyof PlasmicGuidelineItem__VariantsArgs;
export const PlasmicGuidelineItem__VariantProps = new Array<VariantPropType>(
  "reverse"
);

export type PlasmicGuidelineItem__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicGuidelineItem__ArgsType;
export const PlasmicGuidelineItem__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicGuidelineItem__OverridesType = {
  root?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
};

export interface DefaultGuidelineItemProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGuidelineItem__RenderFunc(props: {
  variants: PlasmicGuidelineItem__VariantsArgs;
  args: PlasmicGuidelineItem__ArgsType;
  overrides: PlasmicGuidelineItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "reverse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverse
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootreverse]: hasVariant($state, "reverse", "reverse") }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <Icon7Icon
            className={classNames(projectcss.all, sty.svg___4B9U5)}
            role={"img"}
          />
        ),

        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenreverse]: hasVariant(
            $state,
            "reverse",
            "reverse"
          )
        })
      })}
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(projectcss.all, projectcss.h4, sty.h4, {
          [sty.h4reverse]: hasVariant($state, "reverse", "reverse")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Wallet usage guideline",
          value: args.slot,
          className: classNames(sty.slotTargetSlot, {
            [sty.slotTargetSlotreverse]: hasVariant(
              $state,
              "reverse",
              "reverse"
            )
          })
        })}
      </h4>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGuidelineItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGuidelineItem__VariantsArgs;
    args?: PlasmicGuidelineItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGuidelineItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGuidelineItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGuidelineItem__ArgProps,
          internalVariantPropNames: PlasmicGuidelineItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGuidelineItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGuidelineItem";
  } else {
    func.displayName = `PlasmicGuidelineItem.${nodeName}`;
  }
  return func;
}

export const PlasmicGuidelineItem = Object.assign(
  // Top-level PlasmicGuidelineItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicGuidelineItem
    internalVariantProps: PlasmicGuidelineItem__VariantProps,
    internalArgProps: PlasmicGuidelineItem__ArgProps
  }
);

export default PlasmicGuidelineItem;
/* prettier-ignore-end */
