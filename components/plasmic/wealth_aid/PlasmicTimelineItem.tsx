// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDDRj6bhA72rUU2Wgcq2eA
// Component: ORhB_AY_QX

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbRef4CkfFYuM } from "./PlasmicGlobalVariant__Desktop"; // plasmic-import: BRef4CKF-FYuM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_wealth_aid.module.css"; // plasmic-import: tDDRj6bhA72rUU2Wgcq2eA/projectcss
import sty from "./PlasmicTimelineItem.module.css"; // plasmic-import: ORhB_AY_QX/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: eOiHcfTvhD/icon

export type PlasmicTimelineItem__VariantMembers = {};
export type PlasmicTimelineItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicTimelineItem__VariantsArgs;
export const PlasmicTimelineItem__VariantProps = new Array<VariantPropType>();

export type PlasmicTimelineItem__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTimelineItem__ArgsType;
export const PlasmicTimelineItem__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicTimelineItem__OverridesType = {
  root?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  svg?: p.Flex<"svg">;
};

export interface DefaultTimelineItemProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTimelineItem__RenderFunc(props: {
  variants: PlasmicTimelineItem__VariantsArgs;
  args: PlasmicTimelineItem__ArgsType;
  overrides: PlasmicTimelineItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    desktop: useScreenVariantsbRef4CkfFYuM()
  });

  return (
    (hasVariant(globalVariants, "desktop", "mobileOnly") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__ra0JV)}>
            <h4
              data-plasmic-name={"h4"}
              data-plasmic-override={overrides.h4}
              className={classNames(projectcss.all, projectcss.h4, sty.h4)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.children
              })}
            </h4>
            <div className={classNames(projectcss.all, sty.freeBox___2Bjsd)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "Founded in Seoul as a cryptocurrency mining company in South Korea by 3 crypto enthusiasts, including the CEO, Young Ho Kim. Started with testimonial mining in South Korea with the first generation of ASIC miner.",
                value: args.slot
              })}
            </div>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__tcz4Y)}
                  displayHeight={"345px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                />
              ),

              value: args.slot2
            })}
          </div>
        ) : null}
        <Icon16Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "svg"],
  h4: ["h4"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTimelineItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTimelineItem__VariantsArgs;
    args?: PlasmicTimelineItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTimelineItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTimelineItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTimelineItem__ArgProps,
          internalVariantPropNames: PlasmicTimelineItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTimelineItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimelineItem";
  } else {
    func.displayName = `PlasmicTimelineItem.${nodeName}`;
  }
  return func;
}

export const PlasmicTimelineItem = Object.assign(
  // Top-level PlasmicTimelineItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicTimelineItem
    internalVariantProps: PlasmicTimelineItem__VariantProps,
    internalArgProps: PlasmicTimelineItem__ArgProps
  }
);

export default PlasmicTimelineItem;
/* prettier-ignore-end */
