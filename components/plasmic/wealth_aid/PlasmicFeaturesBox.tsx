// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDDRj6bhA72rUU2Wgcq2eA
// Component: 5kmIiykNrd

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FeatureItem from "../../FeatureItem"; // plasmic-import: SeTtzqCGQz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_wealth_aid.module.css"; // plasmic-import: tDDRj6bhA72rUU2Wgcq2eA/projectcss
import sty from "./PlasmicFeaturesBox.module.css"; // plasmic-import: 5kmIiykNrd/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: tcx3gUBuTW/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 7gydR2uQdK/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: V9R_MsR5d9/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: lKw8OECe_B/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: bb4TwzirCJ/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: qaIMd65Es9/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 88vljwt9oU/icon

export type PlasmicFeaturesBox__VariantMembers = {
  minerHosting: "minerHosting";
};
export type PlasmicFeaturesBox__VariantsArgs = {
  minerHosting?: SingleBooleanChoiceArg<"minerHosting">;
};
type VariantPropType = keyof PlasmicFeaturesBox__VariantsArgs;
export const PlasmicFeaturesBox__VariantProps = new Array<VariantPropType>(
  "minerHosting"
);

export type PlasmicFeaturesBox__ArgsType = {};
type ArgPropType = keyof PlasmicFeaturesBox__ArgsType;
export const PlasmicFeaturesBox__ArgProps = new Array<ArgPropType>();

export type PlasmicFeaturesBox__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultFeaturesBoxProps {
  minerHosting?: SingleBooleanChoiceArg<"minerHosting">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeaturesBox__RenderFunc(props: {
  variants: PlasmicFeaturesBox__VariantsArgs;
  args: PlasmicFeaturesBox__ArgsType;
  overrides: PlasmicFeaturesBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "minerHosting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.minerHosting
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootminerHosting]: hasVariant(
            $state,
            "minerHosting",
            "minerHosting"
          )
        }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___5TOz0,
          {
            [sty.textminerHosting___5TOz07Llie]: hasVariant(
              $state,
              "minerHosting",
              "minerHosting"
            )
          }
        )}
      >
        {hasVariant($state, "minerHosting", "minerHosting")
          ? "Miner Hosting"
          : "Cloud Mining"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__tlbe1,
          {
            [sty.textminerHosting__tlbe17Llie]: hasVariant(
              $state,
              "minerHosting",
              "minerHosting"
            )
          }
        )}
      >
        {hasVariant($state, "minerHosting", "minerHosting")
          ? "We solves the difficulties with mining by hosting your miners at our professional facilities."
          : "We offer the most reliable and profitable cloud mining contracts."}
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxminerHosting]: hasVariant(
            $state,
            "minerHosting",
            "minerHosting"
          )
        })}
      >
        <FeatureItem
          className={classNames("__wab_instance", sty.featureItem__btQm4, {
            [sty.featureItemminerHosting__btQm47Llie]: hasVariant(
              $state,
              "minerHosting",
              "minerHosting"
            )
          })}
          slot={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "Turnkey service"
              : "Lifetime Hashrate"
          }
          slot2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cIni9,
                {
                  [sty.textminerHosting__cIni97Llie]: hasVariant(
                    $state,
                    "minerHosting",
                    "minerHosting"
                  )
                }
              )}
            >
              {hasVariant($state, "minerHosting", "minerHosting")
                ? "Our maintenance team works 24/7, taking care of ongoing monitoring, troubleshooting, maintenance and software updates. "
                : "We provide 6-month and exclusive lifetime plans with a wide range of mining power.√è"}
            </div>
          }
        >
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant($state, "minerHosting", "minerHosting")
                ? Icon5Icon
                : Icon8Icon
            }
            className={classNames(projectcss.all, sty.svg__hTdb, {
              [sty.svgminerHosting__hTdb7Llie]: hasVariant(
                $state,
                "minerHosting",
                "minerHosting"
              )
            })}
            role={"img"}
          />
        </FeatureItem>
        <FeatureItem
          className={classNames("__wab_instance", sty.featureItem__aLie5, {
            [sty.featureItemminerHosting__aLie57Llie]: hasVariant(
              $state,
              "minerHosting",
              "minerHosting"
            )
          })}
          slot={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "Flexible package"
              : "Multiple Cryptos"
          }
          slot2={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "We offer customized packages for both newcomers and large-scale investors based on their needs of miner model, quantity, and contract duration."
              : "Bitcoin, Ethereum and Litecoin cloud hash rate available."
          }
        >
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant($state, "minerHosting", "minerHosting")
                ? Icon6Icon
                : Icon2Icon
            }
            className={classNames(projectcss.all, sty.svg__cjAg2, {
              [sty.svgminerHosting__cjAg27Llie]: hasVariant(
                $state,
                "minerHosting",
                "minerHosting"
              )
            })}
            role={"img"}
          />
        </FeatureItem>
        <FeatureItem
          className={classNames("__wab_instance", sty.featureItem__fcYfK)}
          slot={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "Low Hosting Rate"
              : "Cloud Dashboard"
          }
          slot2={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "All-in-one hosting price starts at 0.056USD/kWh (Electricity, maintenance, cooling, ethernet, labour, security and VPN are all included)."
              : "Check your mining income, monthly fee and total hashrate via HashMax cloud dashboard."
          }
        >
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant($state, "minerHosting", "minerHosting")
                ? Icon7Icon
                : Icon3Icon
            }
            className={classNames(projectcss.all, sty.svg__yvAjw, {
              [sty.svgminerHosting__yvAjw7Llie]: hasVariant(
                $state,
                "minerHosting",
                "minerHosting"
              )
            })}
            role={"img"}
          />
        </FeatureItem>
        <FeatureItem
          className={classNames("__wab_instance", sty.featureItem__pv5Yb)}
          slot={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "Hosting Dashboard"
              : "Start immediately"
          }
          slot2={
            hasVariant($state, "minerHosting", "minerHosting")
              ? "We provide a dashboard for customers to monitor their miner status 24/7, including hashrate, rejection rate, and daily income, etc."
              : "Start earning your crypto within 48 hours after payment. Fast and easy!"
          }
        >
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant($state, "minerHosting", "minerHosting")
                ? Icon3Icon
                : Icon4Icon
            }
            className={classNames(projectcss.all, sty.svg___1JJn4, {
              [sty.svgminerHosting___1JJn47Llie]: hasVariant(
                $state,
                "minerHosting",
                "minerHosting"
              )
            })}
            role={"img"}
          />
        </FeatureItem>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeaturesBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeaturesBox__VariantsArgs;
    args?: PlasmicFeaturesBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeaturesBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeaturesBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFeaturesBox__ArgProps,
          internalVariantPropNames: PlasmicFeaturesBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeaturesBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeaturesBox";
  } else {
    func.displayName = `PlasmicFeaturesBox.${nodeName}`;
  }
  return func;
}

export const PlasmicFeaturesBox = Object.assign(
  // Top-level PlasmicFeaturesBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFeaturesBox
    internalVariantProps: PlasmicFeaturesBox__VariantProps,
    internalArgProps: PlasmicFeaturesBox__ArgProps
  }
);

export default PlasmicFeaturesBox;
/* prettier-ignore-end */
