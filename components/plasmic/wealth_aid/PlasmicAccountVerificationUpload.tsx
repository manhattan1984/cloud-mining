// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDDRj6bhA72rUU2Wgcq2eA
// Component: ppgqJ-P5bB

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload"; // plasmic-import: Zzbfw0tfhA/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import Button from "../../Button"; // plasmic-import: L7yFkYpvXpI/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_wealth_aid.module.css"; // plasmic-import: tDDRj6bhA72rUU2Wgcq2eA/projectcss
import sty from "./PlasmicAccountVerificationUpload.module.css"; // plasmic-import: ppgqJ-P5bB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: dYeQX6qkVWM/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: oKPotAOgL1a/icon

export type PlasmicAccountVerificationUpload__VariantMembers = {};
export type PlasmicAccountVerificationUpload__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccountVerificationUpload__VariantsArgs;
export const PlasmicAccountVerificationUpload__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAccountVerificationUpload__ArgsType = {
  imageUrl?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  uploadImage?: () => void;
};
type ArgPropType = keyof PlasmicAccountVerificationUpload__ArgsType;
export const PlasmicAccountVerificationUpload__ArgProps =
  new Array<ArgPropType>("imageUrl", "uploadImage");

export type PlasmicAccountVerificationUpload__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<typeof FormWrapper>;
  formItem?: p.Flex<typeof FormItemWrapper>;
  imageUpload?: p.Flex<typeof UploadWrapper>;
  verificationImage?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultAccountVerificationUploadProps {
  imageUrl?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  uploadImage?: () => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccountVerificationUpload__RenderFunc(props: {
  variants: PlasmicAccountVerificationUpload__VariantsArgs;
  args: PlasmicAccountVerificationUpload__ArgsType;
  overrides: PlasmicAccountVerificationUpload__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "imageUpload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <FormWrapper
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        className={classNames("__wab_instance", sty.form)}
        extendedOnValuesChange={p.generateStateOnChangeProp($state, [
          "form",
          "value"
        ])}
        labelCol={{ span: 8, horizontalOnly: true }}
        layout={"vertical" as const}
        wrapperCol={{ span: 16, horizontalOnly: true }}
      >
        <FormItemWrapper
          data-plasmic-name={"formItem"}
          data-plasmic-override={overrides.formItem}
          className={classNames("__wab_instance", sty.formItem)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ojPix
              )}
            >
              {"Upload Account Verification Image"}
            </div>
          }
          name={"image" as const}
        >
          <UploadWrapper
            data-plasmic-name={"imageUpload"}
            data-plasmic-override={overrides.imageUpload}
            accept={"image/*" as const}
            className={classNames("__wab_instance", sty.imageUpload)}
            files={p.generateStateValueProp($state, ["imageUpload", "files"])}
            maxCount={1 as const}
            onFilesChange={p.generateStateOnChangeProp($state, [
              "imageUpload",
              "files"
            ])}
            showUploadList={true}
          >
            <AntdButton
              className={classNames("__wab_instance", sty.button___2Kw8L)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fLmpb
                )}
              >
                {"Upload"}
              </div>
            </AntdButton>
          </UploadWrapper>
        </FormItemWrapper>
        <Button
          className={classNames("__wab_instance", sty.button__wqJtn)}
          onClick={args.uploadImage}
        />
      </FormWrapper>
      <p.PlasmicImg
        data-plasmic-name={"verificationImage"}
        data-plasmic-override={overrides.verificationImage}
        alt={""}
        className={classNames(sty.verificationImage)}
        displayHeight={"auto" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={args.imageUrl}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "form", "formItem", "imageUpload", "verificationImage"],
  form: ["form", "formItem", "imageUpload"],
  formItem: ["formItem", "imageUpload"],
  imageUpload: ["imageUpload"],
  verificationImage: ["verificationImage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  formItem: typeof FormItemWrapper;
  imageUpload: typeof UploadWrapper;
  verificationImage: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccountVerificationUpload__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccountVerificationUpload__VariantsArgs;
    args?: PlasmicAccountVerificationUpload__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccountVerificationUpload__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccountVerificationUpload__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccountVerificationUpload__ArgProps,
          internalVariantPropNames:
            PlasmicAccountVerificationUpload__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccountVerificationUpload__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccountVerificationUpload";
  } else {
    func.displayName = `PlasmicAccountVerificationUpload.${nodeName}`;
  }
  return func;
}

export const PlasmicAccountVerificationUpload = Object.assign(
  // Top-level PlasmicAccountVerificationUpload renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    formItem: makeNodeComponent("formItem"),
    imageUpload: makeNodeComponent("imageUpload"),
    verificationImage: makeNodeComponent("verificationImage"),

    // Metadata about props expected for PlasmicAccountVerificationUpload
    internalVariantProps: PlasmicAccountVerificationUpload__VariantProps,
    internalArgProps: PlasmicAccountVerificationUpload__ArgProps
  }
);

export default PlasmicAccountVerificationUpload;
/* prettier-ignore-end */
