// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDDRj6bhA72rUU2Wgcq2eA
// Component: H73uM9E5uR

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbRef4CkfFYuM } from "./PlasmicGlobalVariant__Desktop"; // plasmic-import: BRef4CKF-FYuM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_wealth_aid.module.css"; // plasmic-import: tDDRj6bhA72rUU2Wgcq2eA/projectcss
import sty from "./PlasmicFunding.module.css"; // plasmic-import: H73uM9E5uR/css

export type PlasmicFunding__VariantMembers = {};
export type PlasmicFunding__VariantsArgs = {};
type VariantPropType = keyof PlasmicFunding__VariantsArgs;
export const PlasmicFunding__VariantProps = new Array<VariantPropType>();

export type PlasmicFunding__ArgsType = {};
type ArgPropType = keyof PlasmicFunding__ArgsType;
export const PlasmicFunding__ArgProps = new Array<ArgPropType>();

export type PlasmicFunding__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultFundingProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFunding__RenderFunc(props: {
  variants: PlasmicFunding__VariantsArgs;
  args: PlasmicFunding__ArgsType;
  overrides: PlasmicFunding__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    desktop: useScreenVariantsbRef4CkfFYuM()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={
          hasVariant(globalVariants, "desktop", "mobileOnly")
            ? ("200px" as const)
            : ("400px" as const)
        }
        loading={"lazy" as const}
        src={{
          src: "/plasmic/wealth_aid/images/untitledArtwork5Png.png",
          fullWidth: 1805,
          fullHeight: 1380,
          aspectRatio: undefined
        }}
      />

      <div className={classNames(projectcss.all, sty.freeBox__ao22T)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xm9A
          )}
        >
          {
            "Wealthaid Mining is an investment firm in Singapore focusing on cryptocurrency and blockchain investment, by applying professional trading, capital investing and portfolio management into digital assets."
          }
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___2QSdv
        )}
      >
        {"Contact us via support@wealthaidmining.com"}
      </div>
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox___6EGt4)}>
          <div className={classNames(projectcss.all, sty.freeBox__ys1FP)}>
            <div className={classNames(projectcss.all, sty.freeBox__gwAay)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eOzj7
                )}
              >
                {"58%"}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cjtgf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xR9T
              )}
            >
              {"Current Fund Amount: $11.6 Million"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cXUs6
              )}
            >
              {"Target Fund Amount: $20 Million"}
            </div>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFunding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFunding__VariantsArgs;
    args?: PlasmicFunding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFunding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFunding__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFunding__ArgProps,
          internalVariantPropNames: PlasmicFunding__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFunding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFunding";
  } else {
    func.displayName = `PlasmicFunding.${nodeName}`;
  }
  return func;
}

export const PlasmicFunding = Object.assign(
  // Top-level PlasmicFunding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFunding
    internalVariantProps: PlasmicFunding__VariantProps,
    internalArgProps: PlasmicFunding__ArgProps
  }
);

export default PlasmicFunding;
/* prettier-ignore-end */
