// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDDRj6bhA72rUU2Wgcq2eA
// Component: mc3_j3NteF

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import GuidelineItem from "../../GuidelineItem"; // plasmic-import: IUcshbqPHx/component

import { useScreenVariants as useScreenVariantsbRef4CkfFYuM } from "./PlasmicGlobalVariant__Desktop"; // plasmic-import: BRef4CKF-FYuM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_wealth_aid.module.css"; // plasmic-import: tDDRj6bhA72rUU2Wgcq2eA/projectcss
import sty from "./PlasmicGuidelines.module.css"; // plasmic-import: mc3_j3NteF/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: qaIMd65Es9/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: -NjAJXeFz/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: Y6BtdLPFjM/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: dErf7CpQhR/icon

export type PlasmicGuidelines__VariantMembers = {};
export type PlasmicGuidelines__VariantsArgs = {};
type VariantPropType = keyof PlasmicGuidelines__VariantsArgs;
export const PlasmicGuidelines__VariantProps = new Array<VariantPropType>();

export type PlasmicGuidelines__ArgsType = {};
type ArgPropType = keyof PlasmicGuidelines__ArgsType;
export const PlasmicGuidelines__ArgProps = new Array<ArgPropType>();

export type PlasmicGuidelines__OverridesType = {
  root?: p.Flex<"div">;
  aboutUsBanner?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
};

export interface DefaultGuidelinesProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGuidelines__RenderFunc(props: {
  variants: PlasmicGuidelines__VariantsArgs;
  args: PlasmicGuidelines__ArgsType;
  overrides: PlasmicGuidelines__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    desktop: useScreenVariantsbRef4CkfFYuM()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"aboutUsBanner"}
        data-plasmic-override={overrides.aboutUsBanner}
        className={classNames(projectcss.all, sty.aboutUsBanner)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"foreground2"}
          data-plasmic-override={overrides.foreground2}
          hasGap={true}
          className={classNames(projectcss.all, sty.foreground2)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__v7WVq)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Guidelines"}
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Find the guidelines you will need for crypto mining here"}
            </div>
          </p.Stack>
        </p.Stack>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___7WsiX)}>
        <div className={classNames(projectcss.all, sty.freeBox__fx2En)}>
          <GuidelineItem
            className={classNames("__wab_instance", sty.guidelineItem__xLlL8)}
          >
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg__vkc3Z)}
              role={"img"}
            />
          </GuidelineItem>
          <GuidelineItem
            className={classNames("__wab_instance", sty.guidelineItem__zigSc)}
            reverse={true}
            slot={"Bitcoin transaction guideline"}
          >
            <Icon10Icon
              className={classNames(projectcss.all, sty.svg__qaNx6)}
              role={"img"}
            />
          </GuidelineItem>
          <GuidelineItem
            className={classNames("__wab_instance", sty.guidelineItem__vs3Q9)}
            reverse={
              hasVariant(globalVariants, "desktop", "mobileOnly")
                ? undefined
                : true
            }
            slot={"payment guideline"}
          >
            <Icon11Icon
              className={classNames(projectcss.all, sty.svg__lixUj)}
              role={"img"}
            />
          </GuidelineItem>
          <GuidelineItem
            className={classNames("__wab_instance", sty.guidelineItem__ez4TW)}
            reverse={
              hasVariant(globalVariants, "desktop", "mobileOnly")
                ? true
                : undefined
            }
            slot={"after-sale service guideline"}
          >
            <Icon12Icon
              className={classNames(projectcss.all, sty.svg___1RYki)}
              role={"img"}
            />
          </GuidelineItem>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "aboutUsBanner", "foreground2", "h1", "text"],
  aboutUsBanner: ["aboutUsBanner", "foreground2", "h1", "text"],
  foreground2: ["foreground2", "h1", "text"],
  h1: ["h1"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  aboutUsBanner: "div";
  foreground2: "div";
  h1: "h1";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGuidelines__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGuidelines__VariantsArgs;
    args?: PlasmicGuidelines__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGuidelines__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGuidelines__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGuidelines__ArgProps,
          internalVariantPropNames: PlasmicGuidelines__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGuidelines__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGuidelines";
  } else {
    func.displayName = `PlasmicGuidelines.${nodeName}`;
  }
  return func;
}

export const PlasmicGuidelines = Object.assign(
  // Top-level PlasmicGuidelines renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    aboutUsBanner: makeNodeComponent("aboutUsBanner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicGuidelines
    internalVariantProps: PlasmicGuidelines__VariantProps,
    internalArgProps: PlasmicGuidelines__ArgProps
  }
);

export default PlasmicGuidelines;
/* prettier-ignore-end */
